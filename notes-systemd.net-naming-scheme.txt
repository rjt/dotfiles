systemd-networkd, systemd.link, systemd.net-naming-scheme, networkctl, resolvectl, 

Remember the problem i had with the network interface name 
  being too long to set a vLan?  It was a USB-ethernet
  interface and would name itself usbMACADDRESS16, the length of the NIC 
  interface hit a limit and broke vLan attempts.

  cat /usr/lib/systemd/network/73-usb-net-by-mac.link
  NamePolicy=mac #systemd network naming convention explains where this comes from

https://www.freedesktop.org/software/systemd/man/systemd.link.html
https://www.freedesktop.org/software/systemd/man/systemd.net-naming-scheme.html

https://systemd.io/PREDICTABLE_INTERFACE_NAMES/
  /etc/systemd/network/*.link files - man systemd.link
  Pass a kernel switch.

The above doc denotes three ways to turn off the new network naming scheme, but it 
  seems the easiest of which is to pass the following kernel vmlinuz switch:
    net.ifnames=0 
  should revert back to eth0, eth1, ... ethX.
  cat /proc/cmdline to make sure this switch made it to the live system.


systemd-nspawn:
  Example 3. Spawn a shell in a container of a minimal Debian unstable distribution
  
             # debootstrap unstable ~/debian-tree/
             # systemd-nspawn -D ~/debian-tree/



$ gdbus introspect --system   \
  --dest org.freedesktop.resolve1  \
  --object-path /org/freedesktop/resolve1 

node /org/freedesktop/resolve1 {
  interface org.freedesktop.DBus.Peer {
    methods:
      Ping();
      GetMachineId(out s machine_uuid);
    signals:
    properties:
  };
  interface org.freedesktop.DBus.Introspectable {
    methods:
      Introspect(out s xml_data);
    signals:
    properties:
  };
  interface org.freedesktop.DBus.Properties {
    methods:
      Get(in  s interface_name,
          in  s property_name,
          out v value);
      GetAll(in  s interface_name,
             out a{sv} props);
      Set(in  s interface_name,
          in  s property_name,
          in  v value);
    signals:
      PropertiesChanged(s interface_name,
                        a{sv} changed_properties,
                        as invalidated_properties);
    properties:
  };
  interface org.freedesktop.resolve1.Manager {
    methods:
      ResolveHostname(in  i ifindex,
                      in  s name,
                      in  i family,
                      in  t flags,
                      out a(iiay) addresses,
                      out s canonical,
                      out t flags);
      ResolveAddress(in  i ifindex,
                     in  i family,
                     in  ay address,
                     in  t flags,
                     out a(is) names,
                     out t flags);
      ResolveRecord(in  i ifindex,
                    in  s name,
                    in  q class,
                    in  q type,
                    in  t flags,
                    out a(iqqay) records,
                    out t flags);
      ResolveService(in  i ifindex,
                     in  s name,
                     in  s type,
                     in  s domain,
                     in  i family,
                     in  t flags,
                     out a(qqqsa(iiay)s) srv_data,
                     out aay txt_data,
                     out s canonical_name,
                     out s canonical_type,
                     out s canonical_domain,
                     out t flags);
      GetLink(in  i ifindex,
              out o path);
      SetLinkDNS(in  i ifindex,
                 in  a(iay) addresses);
      SetLinkDNSEx(in  i ifindex,
                   in  a(iayqs) addresses);
      SetLinkDomains(in  i ifindex,
                     in  a(sb) domains);
      SetLinkDefaultRoute(in  i ifindex,
                          in  b enable);
      SetLinkLLMNR(in  i ifindex,
                   in  s mode);
      SetLinkMulticastDNS(in  i ifindex,
                          in  s mode);
      SetLinkDNSOverTLS(in  i ifindex,
                        in  s mode);
      SetLinkDNSSEC(in  i ifindex,
                    in  s mode);
      SetLinkDNSSECNegativeTrustAnchors(in  i ifindex,
                                        in  as names);
      RevertLink(in  i ifindex);
      RegisterService(in  s name,
                      in  s name_template,
                      in  s type,
                      in  q service_port,
                      in  q service_priority,
                      in  q service_weight,
                      in  aa{say} txt_datas,
                      out o service_path);
      UnregisterService(in  o service_path);
      ResetStatistics();
      FlushCaches();
      ResetServerFeatures();
    signals:
    properties:
      readonly s LLMNRHostname = 'itwooddesk';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s LLMNR = 'no';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s MulticastDNS = 'no';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s DNSOverTLS = 'no';
      readonly a(iiay) DNS = [(2, 2, [0xc0, 0xa8, 0x0a, 0x3c]), (4, 2, [0x0a, 0x00, 0x64, 0x3c])];
      readonly a(iiayqs) DNSEx = [(2, 2, [0xc0, 0xa8, 0x0a, 0x3c], 0, ''), (4, 2, [0x0a, 0x00, 0x64, 0x3c], 0, '')];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly a(iiay) FallbackDNS = [];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("const")
      readonly a(iiayqs) FallbackDNSEx = [];
      readonly (iiay) CurrentDNSServer = (0, 0, []);
      readonly (iiayqs) CurrentDNSServerEx = (0, 0, [], 0, '');
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly a(isb) Domains = [(2, 'corp.eceo.us', false), (4, 'network.corp.eceo.us', false)];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly (tt) TransactionStatistics = (0, 314);
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly (ttt) CacheStatistics = (17, 283, 31);
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s DNSSEC = 'no';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly (tttt) DNSSECStatistics = (0, 0, 0, 0);
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly b DNSSECSupported = false;
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly as DNSSECNegativeTrustAnchors = ['26.172.in-addr.arpa', '30.172.in-addr.arpa', 'home', '19.172.in-addr.arpa', '25.172.in-addr.arpa', '10.in-addr.arpa', 'intranet', 'internal', 'test', '29.172.in-addr.arpa', '16.172.in-addr.arpa', '23.172.in-addr.arpa', 'lan', '27.172.in-addr.arpa', 'd.f.ip6.arpa', 'home.arpa', '24.172.in-addr.arpa', '22.172.in-addr.arpa', 'private', 'corp', '18.172.in-addr.arpa', 'local', '17.172.in-addr.arpa', '28.172.in-addr.arpa', '20.172.in-addr.arpa', '168.192.in-addr.arpa', '21.172.in-addr.arpa', '31.172.in-addr.arpa'];
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s DNSStubListener = 'yes';
      @org.freedesktop.DBus.Property.EmitsChangedSignal("false")
      readonly s ResolvConfMode = 'stub';
  };
  node dnssd {
  };
  node link {
  };
};
